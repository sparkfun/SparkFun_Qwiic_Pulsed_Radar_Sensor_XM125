{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"acconeer_python_exploration_tool/","title":"Getting Started with the Acconeer Python Exploration Tool","text":"<p>Before you are able to use the Exploration Tool with the XM125, you will also need to flash the appropriate firmware (e.g. the acc_exploration_server_a121.bin). You can use the instructions outlined earlier with the STM32CubeProgrammer. You can also use Acconeer's Exploration Tool to flash firmware as well.</p>"},{"location":"acconeer_python_exploration_tool/#installing-xm125-firmware-with-the-exploration-tool","title":"Installing XM125 Firmware with the Exploration Tool","text":"<p>As explained earlier, each application requires a specific firmware to be flashed on the XM125. By default, the presence detection firmware (i.e. i2c_presence_detector.bin) is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For users that are interested in loading other firmware, we recommend heading over Acconeer's developer site to download the latest firmware. At the time of writing, this should be located under Developer Tools &amp; Support &gt; A121 Docs &amp; Software &gt; XM125 / XE125 &gt; Acconeer XM125 A121 (SDK for XM125).</p> Download the XM125 Firmware! <p>Note</p> <p>You will need an account to download the firmware.  Make sure to register for an account and sign in to download the XM125 firmware.</p>"},{"location":"acconeer_python_exploration_tool/#flashing-firmware","title":"Flashing Firmware","text":"<p>Open the Acconeer Exploration Tool. You'll be presented with two options. For the scope of this tutorial, you will select the A121.</p> <p>Connect a USB between the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) and your computer.</p> <p>Select the Flash tab from the side navigation bar.  </p> <p>Select the firmware to flash to the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 by clicking on the Browse button. In this case, you will need to head to: .. &gt; acconeer_xm125_a121-v1_5_0 &gt; xm125 &gt; out. The version number will change depending on when you downloaded the firmware. Select acc_exploration_server_a121.bin.</p> <p>Select Serial. Then select the COM port that the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 enumerated to. In this case it was COM22 (). The COM port with the parenthesis will most likely be the COM port. From the drop down menu, select XM125.</p> <p>You will need to set the XM125 in bootloader mode.</p> <ul> <li>Press and hold the BOOT button.</li> <li>Press the RST button while still holding down the BOOT button.</li> <li>Release the RST button.</li> <li>After a short moment, release the BOOT button.</li> </ul> <p>Note</p> <p>You will want to wait a short moment before releasing the BOOT button to give the XM125 a moment to recognize that the BOOT button is being held low. Releasing the RST button too fast after the XM125 resets may prevent the module from properly entering bootloader mode.</p> <p>Click the Flash button to flash the firmware. After a few seconds, you should get a message: \"Flashing done!\"</p>"},{"location":"acconeer_python_exploration_tool/#getting-started-with-the-exploration-tool","title":"Getting Started with the Exploration Tool","text":"<p>Click on Stream from the side navigation bar. Select Serial. Then select the COM port that the board enumerated to. In this case, it was COM22 () just like when the board was flashed earlier with the Exploration Tool.</p> <p>Configure the COM port by clicking on the gear between the COM port and Connect button. A small window will pop up to configure the COM port. Make sure to deselect the Auto-connect and manually enter the baud rate: 115200. You may get an error when starting a measurements. Close the window by clicking the X button. Then click the Connect button.</p> <p>There are several demos available with the Acconeer Exploration Tool. Let's check out the presence detector example. Click on the Presence detector button. Then click on the Start Measurement button. Try placing your hand over the sensor and then moving it away</p> <p>You should see the presence distance values increase in the plot. From the history, I had moved my hand quickly away from the sensor resulting in the intra-presence score to increase. Then I moved it back and slowly moved it away resulting in the inter-presence score to increase. The  presence distance values would also be displayed in the bottom plot.</p> <p>Let's check out the distance detector example. Click on the Distance detector button. Then click on the Start Measurement button. Placing my hand over the sensor and then moving it away, you should see the distance values increase in the plot. This was indicated by the four orange dots on the bottom graph.</p> <p>Try checking out Acconeer's documentation for the Exploration tool and adjusting each value for your application. Or even place the sensor behind a wooden door or glass window to see if the sensor can detect your presence or distance from the sensor. There are also applications to measure breathing rate, detect parked cars, adjust the range of the presence detection into zones, measure tank levels, and measure speed!</p> Click Here to Browse Acconeer's Documentation for the Exploration Tool"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can get start experimenting with the breakout board. For the scope of this tutorial, we will highlight one of the examples to get started. From there we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"arduino_examples/#i2c-presence-detection-arduino-examples","title":"I<sup>2</sup>C Presence Detection Arduino Examples","text":"<p>The following examples will go over the presence detection examples over I<sup>2</sup>C . By default, the firmware for the I<sup>2</sup>C  presence detection will be loaded on the SparkFun Pulsed Coherent Radar Sensor. If you decide you uploaded a different firmware to the XM125 and decide to use the Presence Detection Arduino Examples, make sure to follow the steps to reflash the i2c_presence_detector.bin back on the module.</p> <p>For more information about the Presence Detector over I<sup>2</sup>C, we recommend referring to Acconeer's documentation and the User Guide.</p> I2C Presence Detector User Guide"},{"location":"arduino_examples/#example-1-presence-basic-readings","title":"Example 1: Presence Basic Readings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example01PresenceBasicReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud.</p> <p>You should see an output similar to the image below. When presence is detected, the sensor will provide presnce distance values in millimeters.</p> <p>In this case, I placed my hand in front of the sensor and moved it away.</p> <p>Try placing something like a piece of cardboard in front of the sensor to see if the XM125 can still detect your presence. Or aim the sensor facing down toward a table and wave your arm or leg under the table to see if it can sense your movement. Some materials are semi-transparent to 60GHz signals. Thus, it is possible to detect reflecting objects behind a material such as an enclosure, or sensing other objects behind walls or clothing!</p> <p>Note</p> <p>The XM125 is set to a minimum range of 30mm. You can adjust the range in Example 5: Presence Advanced Settings.</p>"},{"location":"arduino_examples/#example-2-presence-gpio0-usage","title":"Example 2: Presence GPIO0 Usage","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, the SparkFun Pulsed Coherent Radar Sensor's GPIO0 will also be set HIGH whenever there is a presence detected. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example02_PresenceGPIO0Usage).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud.</p> <p>You should see an output similar to the image below. In this case, I placed my hand in front of the sensor and moved it away just like the previous example. However, GPIO0 will also be set HIGH whenever a presence is detected.</p> <p>Try using IC hooks or soldering to the PTHs to connect to GPIO0 and GND. Then use a multimeter to measure the pin whenever a pin is HIGH. You should see a voltage of about 3.3V whenever the pin is HIGH and 0V whenever the pin is LOW.</p> <p>Note</p> <p>It is recommended to have a low profile when connecting to the GPIO SparkFun Pulsed Coherent Radar Sensor to limit the amount of reflections. For users connecting IC hooks, we recommend placing them flush with the board or hooking them from the bottom side. For users soldering to the board, make sure that there are no wires protruding in front of the sensor.</p>"},{"location":"arduino_examples/#example-3-presence-serial-plotter","title":"Example 3: Presence Serial Plotter","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, only the values are printed for each line. This makes it easier for the Arduino Serial Plotter to graph the values. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example03_PresenceSerialPlotter).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud, you should see only the values printed. When opening the Arduino Serial Plotter at 115200 baud, you should see the values plotted in the window.</p> <p>You should see an output similar to the images below. In this case, I placed my hand in front of the sensor and moved it away just like the previous examples.</p>"},{"location":"arduino_examples/#example-4-presence-advanced-readings","title":"Example 4: Presence Advanced Readings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, you will also get the intra-presence score and the inter-presence score. The intra-presence score measures the amount of fast motion detected. The inter-presence score measures the amount of slow motion detected. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example04_PresenceAdvancedReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. You should see the three different values printed. In this case, I placed my hand in front of the sensor and moved it quickly away from the sensor. Notice that the intra-presence score was higher than the inter-presence score since my hand was moving quickly away from the sensor.</p> <p>Moving my hand back in front of the sensor, let's try moving it slowly away from the sensor. You should see an output similar to the image below. Notice that the inter-presence score was higher this time since my hand was moving slowly away.</p>"},{"location":"arduino_examples/#example-5-presence-advanced-settings","title":"Example 5: Presence Advanced Settings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, the range for presence sensing can be adjusted in this example. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example05_PresenceAdvancedSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. To test the presence detection over a longer range, I had a friend stand in front of the sensor before moving away. The difference between this and the first example is the ability to configure the ranges for the minimum and maximum presence distance, respectively <code>beginReading</code> and <code>endReading</code>. By default, the \"start\" presence distance range is set to 300mm while the \"end\" presence distance range is set to 2500mm. This example sets the range between <code>300</code> mm and <code>7000</code> mm.</p> <p>Try adjusting the values <code>beginReading</code> and <code>endReading</code>. After uploading, try moving outside of the range. You will notice that the values change to a certain value when a presence is not detected.</p> <p>Note</p> <p>The A121 sensor on the XM125 is advertised as measuring up to 20 meters. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p>"},{"location":"arduino_examples/#i2c-distance-detection-arduino-examples","title":"I<sup>2</sup>C  Distance Detection Arduino Examples","text":"<p>The following examples will go over the distance detection examples over I<sup>2</sup>C . The firmware for the I<sup>2</sup>C  distance detection is not loaded on the SparkFun Pulsed Coherent Radar Sensor. Make sure to follow the steps to flash the i2c_distance_detector.bin before proceeding to Arduino Example 6-9.</p> Install the XM125 Firmware! <p>For more information about the  Distance Detector over I<sup>2</sup>C, we recommend referring to Acconeer's documentation and the User Guide.</p> I2C Distance Detector User Guide"},{"location":"arduino_examples/#example-6-distance-basic-readings","title":"Example 6: Distance Basic Readings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example06_DistanceBasicReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. Similar to the presence examples, the following outputs the distance and strength of an object that is detected within the peaks. Again, a hand was placed close to the sensor before moving away from the XM125.</p>"},{"location":"arduino_examples/#example-7-distance-threshold-settings","title":"Example 7: Distance Threshold Settings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal similar to example 6. The example goes further by setting the XM125's distance amplitude, strength, fixed amplitude, and sensitivity thresholds. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example07_DistanceThresholdSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. The output will be similar to the example 6.</p>"},{"location":"arduino_examples/#example-8-distance-serial-plotter","title":"Example 8: Distance Serial Plotter","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) from peak 0 and peak 1 onto the Arduino Serial Plotter. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example08_DistanceSerialPlotter).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. In this case, the XM125 detected a mesh chair with a coat.</p> <p>Walking behind the chair, the XM125 was able to detect both the chair and when I was standing behind it.</p> <p>Note</p> <p>For those that are interested in viewing more than <code>distancePeak0</code> and <code>distancePeak1</code>, you will need to create the distance variables, read the PeakX distance, and add a <code>Serial.print();</code> for each distance variable similar to Arduino example 6. Make sure to also add a comma between each distance value so that the comma separated value (CSV) can be graphed on the Arduino Serial Plotter. Make sure to also have the last distance value printed as <code>Serial.println();</code></p>"},{"location":"arduino_examples/#example-9-distance-advanced-settings","title":"Example 9: Distance Advanced Settings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal similar to example 6. However, the range for distance sensing can be adjusted in this example. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example09_DistanceAdvancedSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. The difference between this and the example 6 is the ability to configure the ranges for the minimum and maximum distance, respectively <code>beginReading</code> and <code>endReading</code>. This is similar to example 5, but for the distance detection firmware. By default, the \"start\" distance range is set to 300mm while the \"end\" distance range is set to 2500mm. This example sets the range between <code>300</code> mm and <code>7000</code> mm.</p> <p>Note</p> <p>The A121 sensor on the XM125 is advertised as measuring up to 20 meters. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p>"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the Acconeer XM125. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun XM125\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun XM125 A121 Arduino Library (ZIP) <p>Note</p> <p>The SparkFun Qwiic XM125 Arduino Library uses the SparkFun Toolkit as a dependency. This should automatically download when installing  the library using the Arduino Library Manager. For users that are installing the XM125 library manually, make sure to download the SparkFun Toolkit as well. At the time of writing, we were using the following Arduino Libraries, firmware binaries, board add-ons.</p> <ul> <li>Arduino Libraries<ul> <li>SparkFun Qwiic XM125 Arduino Library v1.0.1</li> <li>SparkFun Toolkit v0.9.1</li> </ul> </li> <li>Acconeer XM125 A121 v1.5.0 (i.e. SDK for XM125)<ul> <li>i2c_presence_detector.bin</li> <li>i2c_distance_detector.bin</li> </ul> </li> <li>Board Definitions<ul> <li>esp32 by Espressif v2.0.14 for the IoT RedBoard - ESP32.</li> </ul> </li> </ul>"},{"location":"flashing_firmware_xm125/","title":"Flashing Firmware to the XM125","text":"<p>The XM125 uses different firmware for different applications. You will need to program the XM125 when using presence detection or distance detection. For users using the Arduino examples for presence detection, you can skip this section. Otherwise, follow the steps to flash the firmware for the distance detection or for those that are re-flashing the presence detection firmware.</p>"},{"location":"flashing_firmware_xm125/#downloading-firmware","title":"Downloading Firmware","text":"<p>Note</p> <p>Arduino examples 1-5 with the default firmware (i.e. i2c_presence_detector.bin) that is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For Arduino examples 6-9, you will need to load the distance detection firmware (i.e. i2c_distance_detector.bin)</p> <p>Each application requires a specific firmware to be flashed on the XM125. By default, the presence detection firmware (i.e. i2c_presence_detector.bin) is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For users that are interested in loading other firmware, we recommend heading over Acconeer's developer site to download the latest firmware. At the time of writing, this should be located under Developer Tools &amp; Support &gt; A121 Docs &amp; Software &gt; XM125 / XE125 &gt; Acconeer XM125 A121 (SDK for XM125).</p> Download the XM125 Firmware! <p>Note</p> <p>You will need an account to download the firmware.  Make sure to register for an account and sign in to download the XM125 firmware.</p>"},{"location":"flashing_firmware_xm125/#flashing-firmware","title":"Flashing Firmware","text":"<p>Open the STM32CubeProgrammer software.</p> <p>Connect a USB between the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) and your computer.</p> <p>You will need to set the XM125 in bootloader mode.</p> <ul> <li>Press and hold the BOOT button.</li> <li>Press the RST button while still holding down the BOOT button.</li> <li>Release the RST button.</li> <li>After a short moment, release the BOOT button.</li> </ul> <p>Note</p> <p>You will want to wait a short moment before releasing the BOOT button to give the XM125 a moment to recognize that the BOOT button is being held low. Releasing the RST button too fast after the XM125 resets may prevent the module from properly entering bootloader mode.</p> <p>Select the COM port that the board enumerated to. In this case, it was COM10. The default UART configuration should already be set to the following:</p> <pre><code>- 115200 baud\n- even parity\n- 8 data bits\n- 1 stop bit\n- no flow control\n</code></pre> <p>When ready, hit the Connect button.</p> <p>Click the Download button (the second button on the left navigation bar). Then click on the Browse button to select the firmware that you would like to flash to the board.</p> <p>Since the firmware for the presence detection is already flashed to the board, we will flash the firmware for the distance detection (i.e. i2c_distance_detector.bin). Head to the folder where you downloaded and unzipped the firmware. In this case, you will need to head to: .. &gt; acconeer_xm125_a121-v1_5_0 &gt; xm125 &gt; out. The version number will change depending on when you downloaded the firmware. Select i2c_distance_detector.bin.</p> <p>Enter the start address 0x8000000 to flash the firmware. Click on the Start Programming button to begin flashing the firmware. Once flashed, you should an output after a few seconds: \"File Download Complete\" with the progress bar filled to 100%.</p> <p>Note</p> <p>Using the STM125CubeProgrammer is only one way to flash firmware to the XM125 using! You can also use the Acconeer Python Exploration Tool as well. For more information, check out the section on Flashing Firmware with the Acconeer Exploration Tool.</p> <p>Flashing Firmware using the Acconeer Exploration Tool</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect to the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). Depending on your application, you can connect the board directly to your computer.  For embedded application, you can also connect the board to the IoT RedBoard - ESP32.</p>"},{"location":"hardware_hookup/#usb-to-sparkfun-pulsed-coherent-radar-sensor","title":"USB to SparkFun Pulsed Coherent Radar Sensor","text":"<p>For users that simply want to connect to the board via USB, you will just need to insert a USB C cable into the USB connector. Then connect the other end to your computer's USB port.</p>"},{"location":"hardware_hookup/#connecting-a-usb-and-qwiic-cable","title":"Connecting a USB and Qwiic Cable","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For this example, we will use the IoT RedBoard - ESP32 and its associated cable. Connecting the boards with a Qwiic cable is very simple. Plug a Qwiic cable between the RedBoard IoT and the SparkFun Pulsed Coherent Radar Sensor. If you're going to be soldering to the through hole pins, then just attach lines to power, ground, and the I<sup>2</sup>C data lines to the microcontroller of your choice. To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p> <p>Note</p> <p>For users that are testing the XM125 to detect objects from across the room, you may want to consider using a 3rd hand to hold the board up.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>It is recommended to have a low profile when connecting headers or wires to the SparkFun Pulsed Coherent Radar Sensor to limit the amount of reflections. For users connecting IC hooks, we recommend placing them flush with the board or hooking them from the bottom side. Below is an example of the IC hooks connected from the sides when measuring GPIO0.</p> <p>For users soldering to the board, make sure that there are no headers or wires protruding in front of the sensor. The image below shows straight header pins being soldered to the PTHs. For users that are using the breadboard, we recommend using jumper wires that are close to the board rather than having them protruding in front of the sensor.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Pulsed Coherent Radar Sensor - XM125 (Qwiic). For more information, check out our Resources and Going Further for the XM125 Module and the A121 Pulsed Coherent Radar Sensor.</p> Top View Bottom View"},{"location":"hardware_overview/#xm125-module","title":"XM125 Module","text":"<p>The board breaks out the Acconeer XM125 module with some application circuits.</p> Acconeer XM125 Module <p>Below are a few specifications from the datasheet.</p> <ul> <li>Acconeer XM125 Module<ul> <li>A121<ul> <li>60GHz Pulsed Coherent Radar (PCR)</li> <li>Integrated Baseband, RF Front-End and Antenna in Package</li> <li>Detect Distance, Speed, Motion, and Objects up to 20 Meters***** Away</li> <li>Millimeter Precise Readings</li> <li>Low Power Consumption</li> </ul> </li> <li>STMicroelectronics STM32L431CBY6<ul> <li>32-bit Arm\u00ae Cortex\u00ae M4 MCU</li> <li>Clock Speed: 80 MHz</li> <li>Flash: 128kB</li> <li>RAM: 68kB</li> </ul> </li> </ul> </li> </ul> <p>*Note</p> <p>The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p> <p>For users using the XM125 module to detect objects through a material (especially for those placing the board in an enclosure), you may want to check out Acconeer's Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121 User Guide.</p> Acconeer's Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121 User Guide <p>Note</p> <p>Due to the higher frequencies, pulsed coherent radar sensors may be regulated in certain countries. Be sure to check local regulations before use.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to the USB connector, Qwiic connectors and plated through holes. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The voltage is further regulated down to 1.8V with the RT9080 1.8V/600mA voltage regulator. The logic levels for the XM125 is 3.3V for the I/O pins.</p> <ul> <li>VU / VUSB \u2014 Power from the USB C connector's VBUS provides power to the V_BUS. The V_USB net is also connected to the edge PTH pin labeled as VU on the top of the board and VUSB on the bottom of the board. This is also connected to the input of the 3.3V voltage regulator. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3). The output of the AP2112K 3.3V voltage regulator and input of the RT9080 1.8V voltage regulator are connected to this net. 3.3V net can also be accessed through one of the Qwiic connector's pins. You should only provide a clean 3.3V power signal to those pins.</li> <li>G / GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power from USB, Qwiic, and PTHs (Top View) Power from PTHs (Bottom View)"},{"location":"hardware_overview/#ch340c-usb-to-serial-converter","title":"CH340C USB-to-Serial Converter","text":"<p>ON the back of the board is a built-in CH340 USB-to-serial converter to connect the XM125's primary UART to a computer's USB port. This is useful for users viewing data, configuring the XM125, or updating firmware. ESD protection diodes are included between the USB C and the CH340C's USB data lines.</p> TVS Diodes, and CH340 Highlighted"},{"location":"hardware_overview/#uarts","title":"UARTs","text":"<p>The board has two UARTs. The primary UART (not highlighted in the image below) is connected internally to the CH340C USB-to-Serial converter. There is also a debugging UART that is broken out on the edge of the board.</p> <ul> <li>TX / DEBUG_TX \u2014 TX out for debugging</li> <li>RX / DEBUG_RX \u2014 RX in for debugging</li> </ul> Debugging UART Pins (Top View) Debugging UART Pins (Bottom View) <p>Note</p> <p>To enable or disable UART logging, you will need to call the function after resetting the XM125 in the <code>setup()</code> function (i.e. <code>radarSensor.setPresenceCommand(SFE_XM125_PRESENCE_RESET_MODULE);</code>). Make sure to call the <code>distanceEnableUartLogs()</code>, <code>distanceDisableUartLogs()</code>, <code>presenceEnableUartLogs()</code>, or <code>presenceDisableUartLogs()</code> function before applying the configuration using the <code>radarSensor.setPresenceCommand(SFE_XM125_PRESENCE_APPLY_CONFIGURATION)</code>. The functions correspond the firmware for the presence and distance detection firmware, respectively.</p>"},{"location":"hardware_overview/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on one side of the board. These are the I<sup>2</sup>C data and clock lines and are connected to two 2.2k\u03a9 pull-up resistors. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SDA \u2014 I<sup>2</sup>C data</li> <li>SCL \u2014 I<sup>2</sup>C clock</li> </ul> I2C and Qwiic Connectors (Top View) I2C Pins (Bottom View) <p>The default address of the XM125 is set to 0x52.</p>"},{"location":"hardware_overview/#reset-and-boot-buttons","title":"Reset and Boot Buttons","text":"<p>We included two low profile buttons for reset and bootloader.</p> <ul> <li>RST / RST / RESET \u2014 Pressing down on the reset button will connect the pin to ground and reset the XM125. This is also broken out to a PTH on the edge of the board.</li> <li>BOOT / GPIO2/BOOT \u2014 Pressing down on the boot button will connect the pin to 3.3V. This will put it into bootloader mode when the XM125 is starting up. This is also broken out to a PTH on the edge of the board.  The alternative function of this pin is also used as a general purpose I/O. This can be configurable for different functions. At the time of writing, GPIO2 is not functional with the current firmware. The functionality is to be implemented in the future.</li> </ul> Reset and Boot Pins and Buttons (Top View) Reset and Boot Pins (Bottom View) <p>Note</p> <p>We included low profile buttons on the board to reduce the amount of reflections when using the XM125.</p>"},{"location":"hardware_overview/#swd-pins","title":"SWD Pins","text":"<p>The edge of the board includes the SWDIO and SWDCLK programming pins. On the back of the board, there is a 2x5 SWD footprint to solder a SMD 2x5 header. This is available for users that want to debug and flash the XM125's STM32L431 using a programmer.</p> <ul> <li>SWDIO \u2014 Serial wire debug I/O.</li> <li>SWDCLK \u2014 Serial wire debug clock.</li> </ul> SWD Pins (Top View) SWD Pins (Bottom View)"},{"location":"hardware_overview/#broken-out-pins","title":"Broken Out Pins","text":"<p>Below are the other pins broken out:</p> <ul> <li>INT \u2014 Interrupt output pin. This pin could be used to send an interrupt from the XM125 to a host microcontroller.</li> <li>GPIO1 \u2014 General purpose I/O. This can be configurable for different functions. At the time of writing, GPIO1 are not functional with the current firmware. The functionality is to be implemented in the future.</li> <li>GPIO0 \u2014 General purpose I/O. This can be configurable for different functions. This pin is currently only functional with the presence detector firmware, specifically the i2c_presence_detector.bin .</li> <li>I2C_ADDR \u2014 This pin is used to configure the I<sup>2</sup>C Address. This is also connected to the three way jumper labeled as ADDR. The functionality is to be implemented in the future.</li> <li>WU / WAKE_UP \u2014 This pin is used to set the XM125 in low power mode. This is connected to the WU jumper and 3.3V. To toggle low power mode using a microcotrller, you will need to cut the WU jumper and solder the pin to a microcontroller's GPIO pin. Setting the pin high will wake the XM125 up from low power mode.</li> </ul> SWD Pins (Top View) SWD Pins (Bottom View)"},{"location":"hardware_overview/#led","title":"LED","text":"<p>The board includes the following status LED as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when there is 3.3V available.</li> </ul> LED Highlighted"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>There are jumper pads on the top and bottom of the board.</p> <ul> <li>SHLD \u2014 This jumper is located on the top of the board and connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>I2C \u2014 This three way jumper is located on the top of the board and labeled I2C. By default, this three way jumper is closed. This jumper is connected to two pull-up resistors on the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>WU \u2014 This jumper is located on the top of the board. By default, this jumper is closed. This jumper connects 3.3V with the wake up pin. Cut this trace to enter low power mode.</li> <li>ADDR \u2014 This three way jumper is located on the top of the board and labeled ADDR. By default, this three-way jumper is open. This jumper is used to adjust the I<sup>2</sup>C address of the XM125 module. Adding a solder blob between the center and the pad on either side will change the default address. The functionality is to be implemented in the future.</li> <li>LED \u2014 This jumper is located on the bottom of the board and connects the LED to 3.3V. Cut this jumper to disable the LED.</li> </ul> MEAS PTH Highlighted - Top View Jumpers Highlighted Highlighted - Bottom View"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 2.0\" (25.4mm x 50.8mm). There are 4x mounting holes by each corner of the board for 4-40 screws and standoffs.</p> Board Dimensions"},{"location":"installing_acconeer_python_exploration_tool/","title":"Installing the Acconeer Python Exploration Tool","text":"<p>Acconeer has developed a GUI called the Exploration Tool to test the XM125 and fine-tune its settings for your project needs. The tool supports Windows and Linux and requires Python version 3.8 or later. The Acconeer's Exploration Tool is located in the GitHub repository below.</p> GitHub Repo: Acconeer Exploration Tool <p>For more information about the Exploration Tool with the XM125 module, we recommend checking out Acconeer's documentation. You will find information about installing the python tool for your OS, configuring the XM125 module, and reference applications for the A121. In this tutorial, we will briefly go over how to get started with the Exploration Tool.</p> Acconeer Docs: Exploration Tool <p>Note</p> <p>The SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 uses the CH340 USB-to-serial converter as opposed to the CP210x that is linked in Acconeer's tutorials. You may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>Note</p> <p>The Acconeer Exploration Tool may run slower than expected when using the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 with the software.</p>"},{"location":"installing_stm32cubeprogrammer/","title":"Installing the STM32CubeProgrammer","text":"<p>In addition to the Arduino IDE, you may need to install the STM32CubeProgrammer as well. This software is needed to flash different firmware on the XM125.</p> <p>Head over to STMicroelectronics, click on the Get Software button. This will scroll down to the bottom of the page. Select the STM32CubeProgrammer for your OS to install. After downloading, unzip the STM32CubeProgrammer and click on the installer. Follow the prompts to install the software.</p> Download the STM32Cube Programmer Here!"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Qwiic Pulsed Coherent Radar Sensor features Acconeer's XM125 module and adds powerful 60 GHz radar technology to your projects. This sensor isn't limited to surface detection; it can see through walls, cabinets, and even pockets (depending on the material), making it perfect for unique applications. Measure distances with millimeter precision, detect motion, the speed of an object, or even gestures!</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic Pulsed Coherent Radar Sensor - Acconeer XM125    SEN-24540    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>The XM125 boasts an impressive range of up to 20 meters, allowing you to create long-range sensing projects. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization). Despite its power, the sensor has remarkably low in power consumption, which is ideal for battery-powered applications. The real magic lies in the sensor's ability to do more than measure distance. The XM125 can differentiate between stationary objects and moving targets using pulsed coherent radar. This means you can sense an object's presence and how fast it is moving.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a few basic Arduino examples to get started!</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials at a minimum. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Flexible Qwiic Cable - 100mm [PRT-17259]</li> <li>1x SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) [SEN-24540]</li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic)    SEN-24540 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes. You may also need a hobby knife to modify the jumpers.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 20-30 AWG    TOL-24771 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul> <ul> <li> <p> </p> <p> Magnetic Third-Hand Kit    TOL-19944 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Knife    TOL-09200 </p> </li> </ul> <ul> <li> <p> </p> <p> Digital Multimeter - Basic    TOL-12966 </p> </li> </ul> <ul> <li> <p> </p> <p> Banana to Alligator Cable    CAB-00509 </p> </li> </ul> <ul> <li> <p> </p> <p> Segger J-Link EDU Mini    PGM-24078 </p> </li> </ul> <p>Note</p> <p>For advanced users, the Acconeer's XM125 Software User Guide recommends using a Segger J-Link debug probe. They list the J-Link BASE Compact or an ST-Link debugger. For users that are using the XM125 module for hobby or educational use, you can also use the Segger J-Link EDU Mini. The J-Link EDU Mini is a stripped-down, budget-friendly model of the J-Link debug probe created for educational use. Even with its reduced size, it maintains the J-Link features.</p>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For users connecting to the PTHs, you will need the following prototyping accessories. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Header - 2x5 Pin 1.27mm SMD Unshrouded (JTAG)    PRT-22890 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wire Kit - 140pcs    PRT-00124 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125 up and running, it's time to incorporate it into your own project! With the SparkFun Qwiic Pulsed Coherent Radar Sensor, a world of new project possibilities opens up. Imagine creating presence detection systems for smart homes and security applications, parking space occupancy detection, gesture recognition interfaces for unique user control, level measurement (for example, in tanks or waste containers), through-wall imaging systems for search and rescue, or even advanced robotics with object avoidance and navigation.</p> <p>For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul> <p>Acconeer Resources</p> <ul> <li>Datasheets<ul> <li>XM125</li> <li>A121</li> </ul> </li> <li>User Guides<ul> <li>Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121</li> <li>A121 Presence Detector</li> <li>I2C Presence Detector</li> <li>A121 Distance Detector</li> <li>I2C Distance Detector</li> <li>XM125 Software</li> </ul> </li> <li>Acconeer Getting Started Guide<ul> <li>Handbook</li> <li>Exploration Tool</li> </ul> </li> <li>Acconeer Python Exploration Tool</li> <li>STMicroelectronics STM32CubeProgrammer Software</li> <li>XM125 Firmware</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun Qwiic Pulsed Coherent Radar Sensor features Acconeer's XM125 module and adds powerful 60 GHz radar technology to your projects. This sensor isn't limited to surface detection; it can see through walls, cabinets, and even pockets (depending on the material), making it perfect for unique applications. Measure distances with millimeter precision, detect motion, the speed of an object, or even gestures!</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic Pulsed Coherent Radar Sensor - Acconeer XM125    SEN-24540    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>The XM125 boasts an impressive range of up to 20 meters, allowing you to create long-range sensing projects. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization). Despite its power, the sensor has remarkably low in power consumption, which is ideal for battery-powered applications. The real magic lies in the sensor's ability to do more than measure distance. The XM125 can differentiate between stationary objects and moving targets using pulsed coherent radar. This means you can sense an object's presence and how fast it is moving.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a few basic Arduino examples to get started!</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials at a minimum. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Flexible Qwiic Cable - 100mm [PRT-17259]</li> <li>1x SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) [SEN-24540]</li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic)    SEN-24540 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes. You may also need a hobby knife to modify the jumpers.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 20-30 AWG    TOL-24771 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul> <ul> <li> <p> </p> <p> Magnetic Third-Hand Kit    TOL-19944 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Knife    TOL-09200 </p> </li> </ul> <ul> <li> <p> </p> <p> Digital Multimeter - Basic    TOL-12966 </p> </li> </ul> <ul> <li> <p> </p> <p> Banana to Alligator Cable    CAB-00509 </p> </li> </ul> <ul> <li> <p> </p> <p> Segger J-Link EDU Mini    PGM-24078 </p> </li> </ul> <p>Note</p> <p>For advanced users, the Acconeer's XM125 Software User Guide recommends using a Segger J-Link debug probe. They list the J-Link BASE Compact or an ST-Link debugger. For users that are using the XM125 module for hobby or educational use, you can also use the Segger J-Link EDU Mini. The J-Link EDU Mini is a stripped-down, budget-friendly model of the J-Link debug probe created for educational use. Even with its reduced size, it maintains the J-Link features.</p>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For users connecting to the PTHs, you will need the following prototyping accessories. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Header - 2x5 Pin 1.27mm SMD Unshrouded (JTAG)    PRT-22890 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wire Kit - 140pcs    PRT-00124 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Pulsed Coherent Radar Sensor - XM125 (Qwiic). For more information, check out our Resources and Going Further for the XM125 Module and the A121 Pulsed Coherent Radar Sensor.</p> Top View Bottom View"},{"location":"single_page/#xm125-module","title":"XM125 Module","text":"<p>The board breaks out the Acconeer XM125 module with some application circuits.</p> Acconeer XM125 Module <p>Below are a few specifications from the datasheet.</p> <ul> <li>Acconeer XM125 Module<ul> <li>A121<ul> <li>60GHz Pulsed Coherent Radar (PCR)</li> <li>Integrated Baseband, RF Front-End and Antenna in Package</li> <li>Detect Distance, Speed, Motion, and Objects up to 20 Meters***** Away</li> <li>Millimeter Precise Readings</li> <li>Low Power Consumption</li> </ul> </li> <li>STMicroelectronics STM32L431CBY6<ul> <li>32-bit Arm\u00ae Cortex\u00ae M4 MCU</li> <li>Clock Speed: 80 MHz</li> <li>Flash: 128kB</li> <li>RAM: 68kB</li> </ul> </li> </ul> </li> </ul> <p>*Note</p> <p>The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p> <p>For users using the XM125 module to detect objects through a material (especially for those placing the board in an enclosure), you may want to check out Acconeer's Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121 User Guide.</p> Acconeer's Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121 User Guide <p>Note</p> <p>Due to the higher frequencies, pulsed coherent radar sensors may be regulated in certain countries. Be sure to check local regulations before use.</p>"},{"location":"single_page/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to the USB connector, Qwiic connectors and plated through holes. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The voltage is further regulated down to 1.8V with the RT9080 1.8V/600mA voltage regulator. The logic levels for the XM125 is 3.3V for the I/O pins.</p> <ul> <li>VU / VUSB \u2014 Power from the USB C connector's VBUS provides power to the V_BUS. The V_USB net is also connected to the edge PTH pin labeled as VU on the top of the board and VUSB on the bottom of the board. This is also connected to the input of the 3.3V voltage regulator. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3). The output of the AP2112K 3.3V voltage regulator and input of the RT9080 1.8V voltage regulator are connected to this net. 3.3V net can also be accessed through one of the Qwiic connector's pins. You should only provide a clean 3.3V power signal to those pins.</li> <li>G / GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power from USB, Qwiic, and PTHs (Top View) Power from PTHs (Bottom View)"},{"location":"single_page/#ch340c-usb-to-serial-converter","title":"CH340C USB-to-Serial Converter","text":"<p>ON the back of the board is a built-in CH340 USB-to-serial converter to connect the XM125's primary UART to a computer's USB port. This is useful for users viewing data, configuring the XM125, or updating firmware. ESD protection diodes are included between the USB C and the CH340C's USB data lines.</p> TVS Diodes, and CH340 Highlighted"},{"location":"single_page/#uarts","title":"UARTs","text":"<p>The board has two UARTs. The primary UART (not highlighted in the image below) is connected internally to the CH340C USB-to-Serial converter. There is also a debugging UART that is broken out on the edge of the board.</p> <ul> <li>TX / DEBUG_TX \u2014 TX out for debugging</li> <li>RX / DEBUG_RX \u2014 RX in for debugging</li> </ul> Debugging UART Pins (Top View) Debugging UART Pins (Bottom View) <p>Note</p> <p>To enable or disable UART logging, you will need to call the function after resetting the XM125 in the <code>setup()</code> function (i.e. <code>radarSensor.setPresenceCommand(SFE_XM125_PRESENCE_RESET_MODULE);</code>). Make sure to call the <code>distanceEnableUartLogs()</code>, <code>distanceDisableUartLogs()</code>, <code>presenceEnableUartLogs()</code>, or <code>presenceDisableUartLogs()</code> function before applying the configuration using the <code>radarSensor.setPresenceCommand(SFE_XM125_PRESENCE_APPLY_CONFIGURATION)</code>. The functions correspond the firmware for the presence and distance detection firmware, respectively.</p>"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on one side of the board. These are the I<sup>2</sup>C data and clock lines and are connected to two 2.2k\u03a9 pull-up resistors. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SDA \u2014 I<sup>2</sup>C data</li> <li>SCL \u2014 I<sup>2</sup>C clock</li> </ul> I2C and Qwiic Connectors (Top View) I2C Pins (Bottom View) <p>The default address of the XM125 is set to 0x52.</p>"},{"location":"single_page/#reset-and-boot-buttons","title":"Reset and Boot Buttons","text":"<p>We included two low profile buttons for reset and bootloader.</p> <ul> <li>RST / RST / RESET \u2014 Pressing down on the reset button will connect the pin to ground and reset the XM125. This is also broken out to a PTH on the edge of the board.</li> <li>BOOT / GPIO2/BOOT \u2014 Pressing down on the boot button will connect the pin to 3.3V. This will put it into bootloader mode when the XM125 is starting up. This is also broken out to a PTH on the edge of the board.  The alternative function of this pin is also used as a general purpose I/O. This can be configurable for different functions. At the time of writing, GPIO2 is not functional with the current firmware. The functionality is to be implemented in the future.</li> </ul> Reset and Boot Pins and Buttons (Top View) Reset and Boot Pins (Bottom View) <p>Note</p> <p>We included low profile buttons on the board to reduce the amount of reflections when using the XM125.</p>"},{"location":"single_page/#swd-pins","title":"SWD Pins","text":"<p>The edge of the board includes the SWDIO and SWDCLK programming pins. On the back of the board, there is a 2x5 SWD footprint to solder a SMD 2x5 header. This is available for users that want to debug and flash the XM125's STM32L431 using a programmer.</p> <ul> <li>SWDIO \u2014 Serial wire debug I/O.</li> <li>SWDCLK \u2014 Serial wire debug clock.</li> </ul> SWD Pins (Top View) SWD Pins (Bottom View)"},{"location":"single_page/#broken-out-pins","title":"Broken Out Pins","text":"<p>Below are the other pins broken out:</p> <ul> <li>INT \u2014 Interrupt output pin. This pin could be used to send an interrupt from the XM125 to a host microcontroller.</li> <li>GPIO1 \u2014 General purpose I/O. This can be configurable for different functions. At the time of writing, GPIO1 are not functional with the current firmware. The functionality is to be implemented in the future.</li> <li>GPIO0 \u2014 General purpose I/O. This can be configurable for different functions. This pin is currently only functional with the presence detector firmware, specifically the i2c_presence_detector.bin .</li> <li>I2C_ADDR \u2014 This pin is used to configure the I<sup>2</sup>C Address. This is also connected to the three way jumper labeled as ADDR. The functionality is to be implemented in the future.</li> <li>WU / WAKE_UP \u2014 This pin is used to set the XM125 in low power mode. This is connected to the WU jumper and 3.3V. To toggle low power mode using a microcotrller, you will need to cut the WU jumper and solder the pin to a microcontroller's GPIO pin. Setting the pin high will wake the XM125 up from low power mode.</li> </ul> SWD Pins (Top View) SWD Pins (Bottom View)"},{"location":"single_page/#led","title":"LED","text":"<p>The board includes the following status LED as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when there is 3.3V available.</li> </ul> LED Highlighted"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>There are jumper pads on the top and bottom of the board.</p> <ul> <li>SHLD \u2014 This jumper is located on the top of the board and connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>I2C \u2014 This three way jumper is located on the top of the board and labeled I2C. By default, this three way jumper is closed. This jumper is connected to two pull-up resistors on the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>WU \u2014 This jumper is located on the top of the board. By default, this jumper is closed. This jumper connects 3.3V with the wake up pin. Cut this trace to enter low power mode.</li> <li>ADDR \u2014 This three way jumper is located on the top of the board and labeled ADDR. By default, this three-way jumper is open. This jumper is used to adjust the I<sup>2</sup>C address of the XM125 module. Adding a solder blob between the center and the pad on either side will change the default address. The functionality is to be implemented in the future.</li> <li>LED \u2014 This jumper is located on the bottom of the board and connects the LED to 3.3V. Cut this jumper to disable the LED.</li> </ul> MEAS PTH Highlighted - Top View Jumpers Highlighted Highlighted - Bottom View"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 2.0\" (25.4mm x 50.8mm). There are 4x mounting holes by each corner of the board for 4-40 screws and standoffs.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect to the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). Depending on your application, you can connect the board directly to your computer.  For embedded application, you can also connect the board to the IoT RedBoard - ESP32.</p>"},{"location":"single_page/#usb-to-sparkfun-pulsed-coherent-radar-sensor","title":"USB to SparkFun Pulsed Coherent Radar Sensor","text":"<p>For users that simply want to connect to the board via USB, you will just need to insert a USB C cable into the USB connector. Then connect the other end to your computer's USB port.</p>"},{"location":"single_page/#connecting-a-usb-and-qwiic-cable","title":"Connecting a USB and Qwiic Cable","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For this example, we will use the IoT RedBoard - ESP32 and its associated cable. Connecting the boards with a Qwiic cable is very simple. Plug a Qwiic cable between the RedBoard IoT and the SparkFun Pulsed Coherent Radar Sensor. If you're going to be soldering to the through hole pins, then just attach lines to power, ground, and the I<sup>2</sup>C data lines to the microcontroller of your choice. To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p> <p>Note</p> <p>For users that are testing the XM125 to detect objects from across the room, you may want to consider using a 3rd hand to hold the board up.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>It is recommended to have a low profile when connecting headers or wires to the SparkFun Pulsed Coherent Radar Sensor to limit the amount of reflections. For users connecting IC hooks, we recommend placing them flush with the board or hooking them from the bottom side. Below is an example of the IC hooks connected from the sides when measuring GPIO0.</p> <p>For users soldering to the board, make sure that there are no headers or wires protruding in front of the sensor. The image below shows straight header pins being soldered to the PTHs. For users that are using the breadboard, we recommend using jumper wires that are close to the board rather than having them protruding in front of the sensor.</p>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the Acconeer XM125. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun XM125\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun XM125 A121 Arduino Library (ZIP) <p>Note</p> <p>The SparkFun Qwiic XM125 Arduino Library uses the SparkFun Toolkit as a dependency. This should automatically download when installing  the library using the Arduino Library Manager. For users that are installing the XM125 library manually, make sure to download the SparkFun Toolkit as well. At the time of writing, we were using the following Arduino Libraries, firmware binaries, board add-ons.</p> <ul> <li>Arduino Libraries<ul> <li>SparkFun Qwiic XM125 Arduino Library v1.0.1</li> <li>SparkFun Toolkit v0.9.1</li> </ul> </li> <li>Acconeer XM125 A121 v1.5.0 (i.e. SDK for XM125)<ul> <li>i2c_presence_detector.bin</li> <li>i2c_distance_detector.bin</li> </ul> </li> <li>Board Definitions<ul> <li>esp32 by Espressif v2.0.14 for the IoT RedBoard - ESP32.</li> </ul> </li> </ul>"},{"location":"single_page/#installing-the-stm32cubeprogrammer","title":"Installing the STM32CubeProgrammer","text":"<p>In addition to the Arduino IDE, you may need to install the STM32CubeProgrammer as well. This software is needed to flash different firmware on the XM125.</p> <p>Head over to STMicroelectronics, click on the Get Software button. This will scroll down to the bottom of the page. Select the STM32CubeProgrammer for your OS to install. After downloading, unzip the STM32CubeProgrammer and click on the installer. Follow the prompts to install the software.</p> Download the STM32Cube Programmer Here!"},{"location":"single_page/#flashing-firmware-to-the-xm125","title":"Flashing Firmware to the XM125","text":"<p>The XM125 uses different firmware for different applications. You will need to program the XM125 when using presence detection or distance detection. For users using the Arduino examples for presence detection, you can skip this section. Otherwise, follow the steps to flash the firmware for the distance detection or for those that are re-flashing the presence detection firmware.</p>"},{"location":"single_page/#downloading-firmware","title":"Downloading Firmware","text":"<p>Note</p> <p>Arduino examples 1-5 with the default firmware (i.e. i2c_presence_detector.bin) that is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For Arduino examples 6-9, you will need to load the distance detection firmware (i.e. i2c_distance_detector.bin)</p> <p>Each application requires a specific firmware to be flashed on the XM125. By default, the presence detection firmware (i.e. i2c_presence_detector.bin) is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For users that are interested in loading other firmware, we recommend heading over Acconeer's developer site to download the latest firmware. At the time of writing, this should be located under Developer Tools &amp; Support &gt; A121 Docs &amp; Software &gt; XM125 / XE125 &gt; Acconeer XM125 A121 (SDK for XM125).</p> Download the XM125 Firmware! <p>Note</p> <p>You will need an account to download the firmware.  Make sure to register for an account and sign in to download the XM125 firmware.</p>"},{"location":"single_page/#flashing-firmware","title":"Flashing Firmware","text":"<p>Open the STM32CubeProgrammer software.</p> <p>Connect a USB between the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) and your computer.</p> <p>You will need to set the XM125 in bootloader mode.</p> <ul> <li>Press and hold the BOOT button.</li> <li>Press the RST button while still holding down the BOOT button.</li> <li>Release the RST button.</li> <li>After a short moment, release the BOOT button.</li> </ul> <p>Note</p> <p>You will want to wait a short moment before releasing the BOOT button to give the XM125 a moment to recognize that the BOOT button is being held low. Releasing the RST button too fast after the XM125 resets may prevent the module from properly entering bootloader mode.</p> <p>Select the COM port that the board enumerated to. In this case, it was COM10. The default UART configuration should already be set to the following:</p> <pre><code>- 115200 baud\n- even parity\n- 8 data bits\n- 1 stop bit\n- no flow control\n</code></pre> <p>When ready, hit the Connect button.</p> <p>Click the Download button (the second button on the left navigation bar). Then click on the Browse button to select the firmware that you would like to flash to the board.</p> <p>Since the firmware for the presence detection is already flashed to the board, we will flash the firmware for the distance detection (i.e. i2c_distance_detector.bin). Head to the folder where you downloaded and unzipped the firmware. In this case, you will need to head to: .. &gt; acconeer_xm125_a121-v1_5_0 &gt; xm125 &gt; out. The version number will change depending on when you downloaded the firmware. Select i2c_distance_detector.bin.</p> <p>Enter the start address 0x8000000 to flash the firmware. Click on the Start Programming button to begin flashing the firmware. Once flashed, you should an output after a few seconds: \"File Download Complete\" with the progress bar filled to 100%.</p> <p>Note</p> <p>Using the STM125CubeProgrammer is only one way to flash firmware to the XM125 using! You can also use the Acconeer Python Exploration Tool as well. For more information, check out the section on Flashing Firmware with the Acconeer Exploration Tool.</p> <p>Flashing Firmware using the Acconeer Exploration Tool</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can get start experimenting with the breakout board. For the scope of this tutorial, we will highlight one of the examples to get started. From there we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"single_page/#i2c-presence-detection-arduino-examples","title":"I<sup>2</sup>C Presence Detection Arduino Examples","text":"<p>The following examples will go over the presence detection examples over I<sup>2</sup>C . By default, the firmware for the I<sup>2</sup>C  presence detection will be loaded on the SparkFun Pulsed Coherent Radar Sensor. If you decide you uploaded a different firmware to the XM125 and decide to use the Presence Detection Arduino Examples, make sure to follow the steps to reflash the i2c_presence_detector.bin back on the module.</p> <p>For more information about the Presence Detector over I<sup>2</sup>C, we recommend referring to Acconeer's documentation and the User Guide.</p> I2C Presence Detector User Guide"},{"location":"single_page/#example-1-presence-basic-readings","title":"Example 1: Presence Basic Readings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example01PresenceBasicReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud.</p> <p>You should see an output similar to the image below. When presence is detected, the sensor will provide presnce distance values in millimeters.</p> <p>In this case, I placed my hand in front of the sensor and moved it away.</p> <p>Try placing something like a piece of cardboard in front of the sensor to see if the XM125 can still detect your presence. Or aim the sensor facing down toward a table and wave your arm or leg under the table to see if it can sense your movement. Some materials are semi-transparent to 60GHz signals. Thus, it is possible to detect reflecting objects behind a material such as an enclosure, or sensing other objects behind walls or clothing!</p> <p>Note</p> <p>The XM125 is set to a minimum range of 30mm. You can adjust the range in Example 5: Presence Advanced Settings.</p>"},{"location":"single_page/#example-2-presence-gpio0-usage","title":"Example 2: Presence GPIO0 Usage","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, the SparkFun Pulsed Coherent Radar Sensor's GPIO0 will also be set HIGH whenever there is a presence detected. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example02_PresenceGPIO0Usage).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud.</p> <p>You should see an output similar to the image below. In this case, I placed my hand in front of the sensor and moved it away just like the previous example. However, GPIO0 will also be set HIGH whenever a presence is detected.</p> <p>Try using IC hooks or soldering to the PTHs to connect to GPIO0 and GND. Then use a multimeter to measure the pin whenever a pin is HIGH. You should see a voltage of about 3.3V whenever the pin is HIGH and 0V whenever the pin is LOW.</p> <p>Note</p> <p>It is recommended to have a low profile when connecting to the GPIO SparkFun Pulsed Coherent Radar Sensor to limit the amount of reflections. For users connecting IC hooks, we recommend placing them flush with the board or hooking them from the bottom side. For users soldering to the board, make sure that there are no wires protruding in front of the sensor.</p>"},{"location":"single_page/#example-3-presence-serial-plotter","title":"Example 3: Presence Serial Plotter","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, only the values are printed for each line. This makes it easier for the Arduino Serial Plotter to graph the values. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example03_PresenceSerialPlotter).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud, you should see only the values printed. When opening the Arduino Serial Plotter at 115200 baud, you should see the values plotted in the window.</p> <p>You should see an output similar to the images below. In this case, I placed my hand in front of the sensor and moved it away just like the previous examples.</p>"},{"location":"single_page/#example-4-presence-advanced-readings","title":"Example 4: Presence Advanced Readings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, you will also get the intra-presence score and the inter-presence score. The intra-presence score measures the amount of fast motion detected. The inter-presence score measures the amount of slow motion detected. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example04_PresenceAdvancedReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. You should see the three different values printed. In this case, I placed my hand in front of the sensor and moved it quickly away from the sensor. Notice that the intra-presence score was higher than the inter-presence score since my hand was moving quickly away from the sensor.</p> <p>Moving my hand back in front of the sensor, let's try moving it slowly away from the sensor. You should see an output similar to the image below. Notice that the inter-presence score was higher this time since my hand was moving slowly away.</p>"},{"location":"single_page/#example-5-presence-advanced-settings","title":"Example 5: Presence Advanced Settings","text":"<p>This example reads the output from the XM125 when the presence sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the presence distance values (in millimeters) to a Serial Terminal similar to the first example. However, the range for presence sensing can be adjusted in this example. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example05_PresenceAdvancedSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. To test the presence detection over a longer range, I had a friend stand in front of the sensor before moving away. The difference between this and the first example is the ability to configure the ranges for the minimum and maximum presence distance, respectively <code>beginReading</code> and <code>endReading</code>. By default, the \"start\" presence distance range is set to 300mm while the \"end\" presence distance range is set to 2500mm. This example sets the range between <code>300</code> mm and <code>7000</code> mm.</p> <p>Try adjusting the values <code>beginReading</code> and <code>endReading</code>. After uploading, try moving outside of the range. You will notice that the values change to a certain value when a presence is not detected.</p> <p>Note</p> <p>The A121 sensor on the XM125 is advertised as measuring up to 20 meters. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p>"},{"location":"single_page/#i2c-distance-detection-arduino-examples","title":"I<sup>2</sup>C  Distance Detection Arduino Examples","text":"<p>The following examples will go over the distance detection examples over I<sup>2</sup>C . The firmware for the I<sup>2</sup>C  distance detection is not loaded on the SparkFun Pulsed Coherent Radar Sensor. Make sure to follow the steps to flash the i2c_distance_detector.bin before proceeding to Arduino Example 6-9.</p> Install the XM125 Firmware! <p>For more information about the  Distance Detector over I<sup>2</sup>C, we recommend referring to Acconeer's documentation and the User Guide.</p> I2C Distance Detector User Guide"},{"location":"single_page/#example-6-distance-basic-readings","title":"Example 6: Distance Basic Readings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example06_DistanceBasicReadings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. Similar to the presence examples, the following outputs the distance and strength of an object that is detected within the peaks. Again, a hand was placed close to the sensor before moving away from the XM125.</p>"},{"location":"single_page/#example-7-distance-threshold-settings","title":"Example 7: Distance Threshold Settings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal similar to example 6. The example goes further by setting the XM125's distance amplitude, strength, fixed amplitude, and sensitivity thresholds. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example07_DistanceThresholdSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. The output will be similar to the example 6.</p>"},{"location":"single_page/#example-8-distance-serial-plotter","title":"Example 8: Distance Serial Plotter","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) from peak 0 and peak 1 onto the Arduino Serial Plotter. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example08_DistanceSerialPlotter).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. In this case, the XM125 detected a mesh chair with a coat.</p> <p>Walking behind the chair, the XM125 was able to detect both the chair and when I was standing behind it.</p> <p>Note</p> <p>For those that are interested in viewing more than <code>distancePeak0</code> and <code>distancePeak1</code>, you will need to create the distance variables, read the PeakX distance, and add a <code>Serial.print();</code> for each distance variable similar to Arduino example 6. Make sure to also add a comma between each distance value so that the comma separated value (CSV) can be graphed on the Arduino Serial Plotter. Make sure to also have the last distance value printed as <code>Serial.println();</code></p>"},{"location":"single_page/#example-9-distance-advanced-settings","title":"Example 9: Distance Advanced Settings","text":"<p>This example reads the output from the XM125 when the distance sensing firmware is loaded to the module. Once the sensor is initialized, the example outputs the distance values (in millimeters) and their estimated reflective strengths to a Serial Terminal similar to example 6. However, the range for distance sensing can be adjusted in this example. Head to the examples in the folder (located in File &gt; Examples &gt; SparkFun XM125 Arduino Library &gt; Example09_DistanceAdvancedSettings).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board. Then open the Arduino Serial Monitor at 115200 baud.</p> <p>You should see an output similar to the image below. The difference between this and the example 6 is the ability to configure the ranges for the minimum and maximum distance, respectively <code>beginReading</code> and <code>endReading</code>. This is similar to example 5, but for the distance detection firmware. By default, the \"start\" distance range is set to 300mm while the \"end\" distance range is set to 2500mm. This example sets the range between <code>300</code> mm and <code>7000</code> mm.</p> <p>Note</p> <p>The A121 sensor on the XM125 is advertised as measuring up to 20 meters. The actual measurable distance is dependent on the object size, shape, dielectric properties, and lens (e.g. water level measurements up to 20 meters with lens utilization, human presence detection up to 7 meters with lens-free utilization).</p>"},{"location":"single_page/#installing-the-acconeer-python-exploration-tool","title":"Installing the Acconeer Python Exploration Tool","text":"<p>Acconeer has developed a GUI called the Exploration Tool to test the XM125 and fine-tune its settings for your project needs. The tool supports Windows and Linux and requires Python version 3.8 or later. The Acconeer's Exploration Tool is located in the GitHub repository below.</p> GitHub Repo: Acconeer Exploration Tool <p>For more information about the Exploration Tool with the XM125 module, we recommend checking out Acconeer's documentation. You will find information about installing the python tool for your OS, configuring the XM125 module, and reference applications for the A121. In this tutorial, we will briefly go over how to get started with the Exploration Tool.</p> Acconeer Docs: Exploration Tool <p>Note</p> <p>The SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 uses the CH340 USB-to-serial converter as opposed to the CP210x that is linked in Acconeer's tutorials. You may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>Note</p> <p>The Acconeer Exploration Tool may run slower than expected when using the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 with the software.</p>"},{"location":"single_page/#getting-started-with-the-acconeer-python-exploration-tool","title":"Getting Started with the Acconeer Python Exploration Tool","text":"<p>Before you are able to use the Exploration Tool with the XM125, you will also need to flash the appropriate firmware (e.g. the acc_exploration_server_a121.bin). You can use the instructions outlined earlier with the STM32CubeProgrammer. You can also use Acconeer's Exploration Tool to flash firmware as well.</p>"},{"location":"single_page/#installing-xm125-firmware-with-the-exploration-tool","title":"Installing XM125 Firmware with the Exploration Tool","text":"<p>As explained earlier, each application requires a specific firmware to be flashed on the XM125. By default, the presence detection firmware (i.e. i2c_presence_detector.bin) is loaded on the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic). For users that are interested in loading other firmware, we recommend heading over Acconeer's developer site to download the latest firmware. At the time of writing, this should be located under Developer Tools &amp; Support &gt; A121 Docs &amp; Software &gt; XM125 / XE125 &gt; Acconeer XM125 A121 (SDK for XM125).</p> Download the XM125 Firmware! <p>Note</p> <p>You will need an account to download the firmware.  Make sure to register for an account and sign in to download the XM125 firmware.</p>"},{"location":"single_page/#flashing-firmware_1","title":"Flashing Firmware","text":"<p>Open the Acconeer Exploration Tool. You'll be presented with two options. For the scope of this tutorial, you will select the A121.</p> <p>Connect a USB between the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 (Qwiic) and your computer.</p> <p>Select the Flash tab from the side navigation bar.  </p> <p>Select the firmware to flash to the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 by clicking on the Browse button. In this case, you will need to head to: .. &gt; acconeer_xm125_a121-v1_5_0 &gt; xm125 &gt; out. The version number will change depending on when you downloaded the firmware. Select acc_exploration_server_a121.bin.</p> <p>Select Serial. Then select the COM port that the SparkFun Pulsed Coherent Radar Sensor - Acconeer XM125 enumerated to. In this case it was COM22 (). The COM port with the parenthesis will most likely be the COM port. From the drop down menu, select XM125.</p> <p>You will need to set the XM125 in bootloader mode.</p> <ul> <li>Press and hold the BOOT button.</li> <li>Press the RST button while still holding down the BOOT button.</li> <li>Release the RST button.</li> <li>After a short moment, release the BOOT button.</li> </ul> <p>Note</p> <p>You will want to wait a short moment before releasing the BOOT button to give the XM125 a moment to recognize that the BOOT button is being held low. Releasing the RST button too fast after the XM125 resets may prevent the module from properly entering bootloader mode.</p> <p>Click the Flash button to flash the firmware. After a few seconds, you should get a message: \"Flashing done!\"</p>"},{"location":"single_page/#getting-started-with-the-exploration-tool","title":"Getting Started with the Exploration Tool","text":"<p>Click on Stream from the side navigation bar. Select Serial. Then select the COM port that the board enumerated to. In this case, it was COM22 () just like when the board was flashed earlier with the Exploration Tool.</p> <p>Configure the COM port by clicking on the gear between the COM port and Connect button. A small window will pop up to configure the COM port. Make sure to deselect the Auto-connect and manually enter the baud rate: 115200. You may get an error when starting a measurements. Close the window by clicking the X button. Then click the Connect button.</p> <p>There are several demos available with the Acconeer Exploration Tool. Let's check out the presence detector example. Click on the Presence detector button. Then click on the Start Measurement button. Try placing your hand over the sensor and then moving it away</p> <p>You should see the presence distance values increase in the plot. From the history, I had moved my hand quickly away from the sensor resulting in the intra-presence score to increase. Then I moved it back and slowly moved it away resulting in the inter-presence score to increase. The  presence distance values would also be displayed in the bottom plot.</p> <p>Let's check out the distance detector example. Click on the Distance detector button. Then click on the Start Measurement button. Placing my hand over the sensor and then moving it away, you should see the distance values increase in the plot. This was indicated by the four orange dots on the bottom graph.</p> <p>Try checking out Acconeer's documentation for the Exploration tool and adjusting each value for your application. Or even place the sensor behind a wooden door or glass window to see if the sensor can detect your presence or distance from the sensor. There are also applications to measure breathing rate, detect parked cars, adjust the range of the presence detection into zones, measure tank levels, and measure speed!</p> Click Here to Browse Acconeer's Documentation for the Exploration Tool"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, Acconeer's Support Forum or our SparkFun Forums are a great place to find and ask for help. </p> <p>Acconeer's Support Forum SparkFun Forums</p>"},{"location":"single_page/#issue-flashing-firmware","title":"Issue Flashing Firmware","text":"<p>If you have problems uploading to the board, the board may not be set to Bootloader Mode. You will see the following error with flashing firmware using either the STM32CubeProgrammer.</p> <p>For users using the Acconeer Exploration Tool, you may see the following error when flashing firmware.</p> <p>Try checking the following before attempting to flash the board again.</p> <ul> <li>If you are using the STM32CubeProgrammer, click on the refresh button next to the COM port.</li> <li>Check that you are selecting the correct COM port.</li> <li>Unplugging and replugging the board back to your computer.</li> <li>Ensure that the CH340 drivers are installed on your computer.</li> <li>Follow the steps outlined earlier to set the board in Bootloader Mode.</li> <li>If you have the Arduino IDE also open and had connected the board to the software, make sure to close the software before connecting the XM125 to the STM32CubeProgrammer or Acconeer Exploration Tool.</li> </ul>"},{"location":"single_page/#issue-1-connecting-to-the-acconeer-exploration-tool","title":"Issue 1 Connecting to the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to connect the XM125 to the Acconeer Exploration Tool, the problem may be due to the COM port's configuration.</p> <pre><code>Failed to connect:\nrecv timeout\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 75, in connect_client\n    self.client = client_factory()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\client.py\", line 50, in open\n    return super().open(\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 87, in open\n    return subclass.open(  # type: ignore[no-any-return, attr-defined]\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 91, in open\n    return cls(client_info=client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 115, in __init__\n    self._server_info = self._retrieve_server_info()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 139, in _retrieve_server_info\n    system_info_response = self._server_stream.wait_for_message(messages.SystemInfoResponse)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 64, in wait_for_message\n    for message in self._stream:\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 83, in _get_stream\n    self._error_callback(e)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 135, in _close_before_reraise\n    raise exception\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 81, in _get_stream\n    header_in_bytes = self._link.recv_until(self.protocol.end_sequence)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\serial_link.py\", line 155, in recv_until\n    raise LinkError(\"recv timeout\")\nacconeer.exptool._core.communication.links.buffered_link.LinkError: recv timeout\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n    model.execute_task(task)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 51, in execute_task\n    builtin_task(**kwargs)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 87, in connect_client\n    raise HandledException(msg)\nacconeer.exptool.app.new._exceptions.HandledException: Failed to connect:\nrecv timeout\n</code></pre> <p>In this case, the COM port did not have a baud rate. Make sure to manually enter the COM port's baud rate and set it to 115200 baud.</p>"},{"location":"single_page/#issue-2-connecting-to-the-acconeer-exploration-tool","title":"Issue 2 Connecting to the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to connect the XM125 to the Acconeer Exploration Tool, the problem might be due to another program that is already connected to the COM port.</p> <pre><code>could not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 75, in connect_client\n    self.client = client_factory()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\client.py\", line 50, in open\n    return super().open(\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 87, in open\n    return subclass.open(  # type: ignore[no-any-return, attr-defined]\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 91, in open\n    return cls(client_info=client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 107, in __init__\n    (self._link, self._client_info) = ensure_connected_link(self.client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\helpers.py\", line 101, in ensure_connected_link\n    link.connect()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\serial_link.py\", line 118, in connect\n    self._ser.open()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\serial\\serialwin32.py\", line 64, in open\n    raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nserial.serialutil.SerialException: could not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n    model.execute_task(task)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 51, in execute_task\n    builtin_task(**kwargs)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 87, in connect_client\n    raise HandledException(msg)\nacconeer.exptool.app.new._exceptions.HandledException: Failed to connect:\ncould not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n</code></pre> <p>Try the checking the following before attempting to connect to the board again.</p> <ul> <li>Check that you are selecting the correct COM port.</li> <li>Unplugging and replugging the board back to your computer.</li> <li>If you have the Arduino IDE or STM32CubeProgrammer also open and had previously connected to the COM port, make sure to close the software before connecting the XM125 to the Acconeer Exploration Tool.</li> <li>Close the instance of the Acconeer Exploration Tool and restart the program.</li> </ul>"},{"location":"single_page/#issue-starting-measurements-with-the-acconeer-exploration-tool","title":"Issue Starting Measurements with the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to begin measurements with the XM125 on the Acconeer Exploration Tool, the problem may be due to the COM port's configuration.</p> <pre><code>Cannot detach a recorder from a closed client\n\nUnhandled error - please file a bug\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <p><pre><code>Traceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 86, in _get_stream\n\u00a0 \u00a0 header: dict[str, t.Any] = json.loads(header_in_bytes)\n\u00a0 File \"json\\__init__.py\", line 346, in loads\n\u00a0 File \"json\\decoder.py\", line 340, in decode\njson.decoder.JSONDecodeError: Extra data: line 1 column 14 (char 13)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_plugins\\_a121.py\", line 176, in start_session\n\u00a0 \u00a0 self._start_session(self._recorder)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\presence\\_detector_plugin.py\", line 161, in _start_session\n\u00a0 \u00a0 self._detector_instance.start(recorder)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\presence\\_detector.py\", line 247, in start\n\u00a0 \u00a0 self.estimated_frame_rate = estimate_frame_rate(self.client, self.session_config)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_utils.py\", line 446, in estimate_frame_rate\n\u00a0 \u00a0 client.stop_session()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_application_client.py\", line 106, in stop_session\n\u00a0 \u00a0 result = self._wrapped_client.stop_session()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 294, in stop_session\n\u00a0 \u00a0 _ = self._server_stream.wait_for_message(\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 64, in wait_for_message\n\u00a0 \u00a0 for message in self._stream:\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 88, in _get_stream\n\u00a0 \u00a0 self._error_callback(RuntimeError(f\"Cannot decode header {header_in_bytes!r}\"))\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 135, in _close_before_reraise\n\u00a0 \u00a0 raise exception\nRuntimeError: Cannot decode header bytearray(b'\"result_info\":[[{\"tick\":35909,\"data_saturated\":false,\"temperature\":48,\"calibration_needed\":false,\"frame_delayed\":false}]],\"status\":\"ok\",\"payload_size\":1280}\\n')\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n\u00a0 \u00a0 model.execute_task(task)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 56, in execute_task\n\u00a0 \u00a0 plugin_task(**kwargs)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_plugins\\_a121.py\", line 178, in start_session\n\u00a0 \u00a0 recorder = self.client.detach_recorder()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 157, in detach_recorder\n\u00a0 \u00a0 raise ClientError(\"Cannot detach a recorder from a closed client\")\nacconeer.exptool._core.communication.client.ClientError: Cannot detach a recorder from a closed client\n</code></pre> This is probably due to the COM port settings (i.e. you probably selected the \"Auto-connect\" checkbox). You will need to close the instance of the Acconeer Exploration Tool, unplug/replug the XM125 back to your computer, and manually enter the COM port's baud rate.</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125 up and running, it's time to incorporate it into your own project! With the SparkFun Qwiic Pulsed Coherent Radar Sensor, a world of new project possibilities opens up. Imagine creating presence detection systems for smart homes and security applications, parking space occupancy detection, gesture recognition interfaces for unique user control, level measurement (for example, in tanks or waste containers), through-wall imaging systems for search and rescue, or even advanced robotics with object avoidance and navigation.</p> <p>For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul> <p>Acconeer Resources</p> <ul> <li>Datasheets<ul> <li>XM125</li> <li>A121</li> </ul> </li> <li>User Guides<ul> <li>Hardware and Physical Integration Guideline PCR Sensors A111 &amp; A121</li> <li>A121 Presence Detector</li> <li>I2C Presence Detector</li> <li>A121 Distance Detector</li> <li>I2C Distance Detector</li> <li>XM125 Software</li> </ul> </li> <li>Acconeer Getting Started Guide<ul> <li>Handbook</li> <li>Exploration Tool</li> </ul> </li> <li>Acconeer Python Exploration Tool</li> <li>STMicroelectronics STM32CubeProgrammer Software</li> <li>XM125 Firmware</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, Acconeer's Support Forum or our SparkFun Forums are a great place to find and ask for help. </p> <p>Acconeer's Support Forum SparkFun Forums</p>"},{"location":"troubleshooting/#issue-flashing-firmware","title":"Issue Flashing Firmware","text":"<p>If you have problems uploading to the board, the board may not be set to Bootloader Mode. You will see the following error with flashing firmware using either the STM32CubeProgrammer.</p> <p>For users using the Acconeer Exploration Tool, you may see the following error when flashing firmware.</p> <p>Try checking the following before attempting to flash the board again.</p> <ul> <li>If you are using the STM32CubeProgrammer, click on the refresh button next to the COM port.</li> <li>Check that you are selecting the correct COM port.</li> <li>Unplugging and replugging the board back to your computer.</li> <li>Ensure that the CH340 drivers are installed on your computer.</li> <li>Follow the steps outlined earlier to set the board in Bootloader Mode.</li> <li>If you have the Arduino IDE also open and had connected the board to the software, make sure to close the software before connecting the XM125 to the STM32CubeProgrammer or Acconeer Exploration Tool.</li> </ul>"},{"location":"troubleshooting/#issue-1-connecting-to-the-acconeer-exploration-tool","title":"Issue 1 Connecting to the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to connect the XM125 to the Acconeer Exploration Tool, the problem may be due to the COM port's configuration.</p> <pre><code>Failed to connect:\nrecv timeout\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 75, in connect_client\n    self.client = client_factory()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\client.py\", line 50, in open\n    return super().open(\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 87, in open\n    return subclass.open(  # type: ignore[no-any-return, attr-defined]\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 91, in open\n    return cls(client_info=client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 115, in __init__\n    self._server_info = self._retrieve_server_info()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 139, in _retrieve_server_info\n    system_info_response = self._server_stream.wait_for_message(messages.SystemInfoResponse)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 64, in wait_for_message\n    for message in self._stream:\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 83, in _get_stream\n    self._error_callback(e)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 135, in _close_before_reraise\n    raise exception\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 81, in _get_stream\n    header_in_bytes = self._link.recv_until(self.protocol.end_sequence)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\serial_link.py\", line 155, in recv_until\n    raise LinkError(\"recv timeout\")\nacconeer.exptool._core.communication.links.buffered_link.LinkError: recv timeout\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n    model.execute_task(task)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 51, in execute_task\n    builtin_task(**kwargs)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 87, in connect_client\n    raise HandledException(msg)\nacconeer.exptool.app.new._exceptions.HandledException: Failed to connect:\nrecv timeout\n</code></pre> <p>In this case, the COM port did not have a baud rate. Make sure to manually enter the COM port's baud rate and set it to 115200 baud.</p>"},{"location":"troubleshooting/#issue-2-connecting-to-the-acconeer-exploration-tool","title":"Issue 2 Connecting to the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to connect the XM125 to the Acconeer Exploration Tool, the problem might be due to another program that is already connected to the COM port.</p> <pre><code>could not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 75, in connect_client\n    self.client = client_factory()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\client.py\", line 50, in open\n    return super().open(\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 87, in open\n    return subclass.open(  # type: ignore[no-any-return, attr-defined]\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 91, in open\n    return cls(client_info=client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 107, in __init__\n    (self._link, self._client_info) = ensure_connected_link(self.client_info)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\helpers.py\", line 101, in ensure_connected_link\n    link.connect()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\links\\serial_link.py\", line 118, in connect\n    self._ser.open()\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\serial\\serialwin32.py\", line 64, in open\n    raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nserial.serialutil.SerialException: could not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n    model.execute_task(task)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 51, in execute_task\n    builtin_task(**kwargs)\n  File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 87, in connect_client\n    raise HandledException(msg)\nacconeer.exptool.app.new._exceptions.HandledException: Failed to connect:\ncould not open port 'COM10': PermissionError(13, 'Access is denied.', None, 5)\n</code></pre> <p>Try the checking the following before attempting to connect to the board again.</p> <ul> <li>Check that you are selecting the correct COM port.</li> <li>Unplugging and replugging the board back to your computer.</li> <li>If you have the Arduino IDE or STM32CubeProgrammer also open and had previously connected to the COM port, make sure to close the software before connecting the XM125 to the Acconeer Exploration Tool.</li> <li>Close the instance of the Acconeer Exploration Tool and restart the program.</li> </ul>"},{"location":"troubleshooting/#issue-starting-measurements-with-the-acconeer-exploration-tool","title":"Issue Starting Measurements with the Acconeer Exploration Tool","text":"<p>If you receive the following error when trying to begin measurements with the XM125 on the Acconeer Exploration Tool, the problem may be due to the COM port's configuration.</p> <pre><code>Cannot detach a recorder from a closed client\n\nUnhandled error - please file a bug\n</code></pre> <p>When clicking on the \"Show Details...\" button, you may see the following detailed error:</p> <p><pre><code>Traceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 86, in _get_stream\n\u00a0 \u00a0 header: dict[str, t.Any] = json.loads(header_in_bytes)\n\u00a0 File \"json\\__init__.py\", line 346, in loads\n\u00a0 File \"json\\decoder.py\", line 340, in decode\njson.decoder.JSONDecodeError: Extra data: line 1 column 14 (char 13)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_plugins\\_a121.py\", line 176, in start_session\n\u00a0 \u00a0 self._start_session(self._recorder)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\presence\\_detector_plugin.py\", line 161, in _start_session\n\u00a0 \u00a0 self._detector_instance.start(recorder)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\presence\\_detector.py\", line 247, in start\n\u00a0 \u00a0 self.estimated_frame_rate = estimate_frame_rate(self.client, self.session_config)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_utils.py\", line 446, in estimate_frame_rate\n\u00a0 \u00a0 client.stop_session()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_application_client.py\", line 106, in stop_session\n\u00a0 \u00a0 result = self._wrapped_client.stop_session()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 294, in stop_session\n\u00a0 \u00a0 _ = self._server_stream.wait_for_message(\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 64, in wait_for_message\n\u00a0 \u00a0 for message in self._stream:\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\message_stream.py\", line 88, in _get_stream\n\u00a0 \u00a0 self._error_callback(RuntimeError(f\"Cannot decode header {header_in_bytes!r}\"))\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\_core\\communication\\exploration_client.py\", line 135, in _close_before_reraise\n\u00a0 \u00a0 raise exception\nRuntimeError: Cannot decode header bytearray(b'\"result_info\":[[{\"tick\":35909,\"data_saturated\":false,\"temperature\":48,\"calibration_needed\":false,\"frame_delayed\":false}]],\"status\":\"ok\",\"payload_size\":1280}\\n')\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_backend.py\", line 161, in process_program\n\u00a0 \u00a0 model.execute_task(task)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\app\\new\\backend\\_model.py\", line 56, in execute_task\n\u00a0 \u00a0 plugin_task(**kwargs)\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\a121\\algo\\_plugins\\_a121.py\", line 178, in start_session\n\u00a0 \u00a0 recorder = self.client.detach_recorder()\n\u00a0 File \"C:\\Users\\...\\portable_exploration_tool\\tools\\python-3.9.10-embed-amd64\\lib\\site-packages\\acconeer\\exptool\\_core\\communication\\client.py\", line 157, in detach_recorder\n\u00a0 \u00a0 raise ClientError(\"Cannot detach a recorder from a closed client\")\nacconeer.exptool._core.communication.client.ClientError: Cannot detach a recorder from a closed client\n</code></pre> This is probably due to the COM port settings (i.e. you probably selected the \"Auto-connect\" checkbox). You will need to close the instance of the Acconeer Exploration Tool, unplug/replug the XM125 back to your computer, and manually enter the COM port's baud rate.</p>"},{"location":"assets/component_documentation/","title":"SparkFun Documentation","text":"<p>This directory should include any necessary datasheets, example number crunching, etc. </p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic Pulsed Coherent Radar Sensor - XM125 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}